# This is a basic workflow to help you get started with Actions

name: Detectors

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    paths:
    - 'modules/**.tf'
    - 'modules/**/conf/detector-*.yaml'
    - 'scripts/**'
    - 'Makefile'
    - '.github/workflows/main.yml'
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deployment:
    # The type of runner that the job will run on
    #runs-on: hashicorp/terraform:full
    runs-on: ubuntu-latest
    container:
      image: "claranet/terraform-ci:latest"
    env:
      SFX_AUTH_TOKEN: ${{ secrets.SFX_TOKEN }}
      TF_VAR_environment: "ci-testing"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 0.13.5
        terraform_wrapper: false

    - name: Generate example stack importing all modules
      run: make stack
    
    - name: Terraform fmt
      run: terraform fmt -recursive -write=false -diff -check .

    - name: Terraform init
      run: terraform init examples/stack

    - name: Terraform validate
      run: terraform validate examples/stack

    #- name: Terraform Plan
    #  run: terraform plan -input=false -lock=false -detailed-exitcode examples/stack || if [ $? -ne 2 ]; then exit $?; fi

    - name: Enable destroy
      run: echo ::set-output name=enabled::1
      id: destroy

    - name: Terraform Apply
      #if: github.ref == 'refs/heads/master' && github.event_name == 'push' && ${{ always() }}
      run: terraform apply -input=false -lock=false -auto-approve examples/stack

    - name: Terraform Destroy
      if: always() && steps.destroy.outputs.enabled == '1'
      run: terraform destroy -input=false -lock=false -auto-approve examples/stack

  compliance:
    runs-on: ubuntu-latest
    container:
      image: "claranet/terraform-ci:latest"

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Check and lint
      run: make check

  outputs:
    runs-on: ubuntu-latest
    container:
      image: "claranet/terraform-ci:latest"

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Generate modules outputs
      run: make outputs

    - name: Check for changes
      run: git diff --exit-code

  gen:
    runs-on: ubuntu-latest
    container:
      image: "claranet/terraform-ci:latest"

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Generate modules detectors from preset configs
      run: make detectors

    - name: Check for changes
      run: |
        git diff --exit-code
        ! [ -n "$(git status --porcelain)" ]

